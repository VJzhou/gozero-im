// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.2
// Source: friend.proto

package friend

import (
	"context"

	"im/application/friend/rpc/service"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ApplyFriendItem         = service.ApplyFriendItem
	ApplyFriendListRequest  = service.ApplyFriendListRequest
	ApplyFriendListResponse = service.ApplyFriendListResponse
	ApplyFriendRequest      = service.ApplyFriendRequest
	ApplyFriendResponse     = service.ApplyFriendResponse
	ApplyHandlerRequest     = service.ApplyHandlerRequest
	ApplyHandlerResponse    = service.ApplyHandlerResponse
	FriendListRequest       = service.FriendListRequest
	FriendListResponse      = service.FriendListResponse
	RemoveFriendRequest     = service.RemoveFriendRequest
	RemoveFriendResponse    = service.RemoveFriendResponse

	Friend interface {
		ApplyFriend(ctx context.Context, in *ApplyFriendRequest, opts ...grpc.CallOption) (*ApplyFriendResponse, error)
		ApplyFriendList(ctx context.Context, in *ApplyFriendListRequest, opts ...grpc.CallOption) (*ApplyFriendListResponse, error)
		ApplyPass(ctx context.Context, in *ApplyHandlerRequest, opts ...grpc.CallOption) (*ApplyHandlerResponse, error)
		ApplyReject(ctx context.Context, in *ApplyHandlerRequest, opts ...grpc.CallOption) (*ApplyHandlerResponse, error)
		FriendList(ctx context.Context, in *FriendListRequest, opts ...grpc.CallOption) (*FriendListResponse, error)
		RemoveFriend(ctx context.Context, in *RemoveFriendRequest, opts ...grpc.CallOption) (*RemoveFriendResponse, error)
	}

	defaultFriend struct {
		cli zrpc.Client
	}
)

func NewFriend(cli zrpc.Client) Friend {
	return &defaultFriend{
		cli: cli,
	}
}

func (m *defaultFriend) ApplyFriend(ctx context.Context, in *ApplyFriendRequest, opts ...grpc.CallOption) (*ApplyFriendResponse, error) {
	client := service.NewFriendClient(m.cli.Conn())
	return client.ApplyFriend(ctx, in, opts...)
}

func (m *defaultFriend) ApplyFriendList(ctx context.Context, in *ApplyFriendListRequest, opts ...grpc.CallOption) (*ApplyFriendListResponse, error) {
	client := service.NewFriendClient(m.cli.Conn())
	return client.ApplyFriendList(ctx, in, opts...)
}

func (m *defaultFriend) ApplyPass(ctx context.Context, in *ApplyHandlerRequest, opts ...grpc.CallOption) (*ApplyHandlerResponse, error) {
	client := service.NewFriendClient(m.cli.Conn())
	return client.ApplyPass(ctx, in, opts...)
}

func (m *defaultFriend) ApplyReject(ctx context.Context, in *ApplyHandlerRequest, opts ...grpc.CallOption) (*ApplyHandlerResponse, error) {
	client := service.NewFriendClient(m.cli.Conn())
	return client.ApplyReject(ctx, in, opts...)
}

func (m *defaultFriend) FriendList(ctx context.Context, in *FriendListRequest, opts ...grpc.CallOption) (*FriendListResponse, error) {
	client := service.NewFriendClient(m.cli.Conn())
	return client.FriendList(ctx, in, opts...)
}

func (m *defaultFriend) RemoveFriend(ctx context.Context, in *RemoveFriendRequest, opts ...grpc.CallOption) (*RemoveFriendResponse, error) {
	client := service.NewFriendClient(m.cli.Conn())
	return client.RemoveFriend(ctx, in, opts...)
}
