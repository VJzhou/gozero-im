// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: friend.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Friend_ApplyFriend_FullMethodName     = "/service.Friend/ApplyFriend"
	Friend_ApplyFriendList_FullMethodName = "/service.Friend/ApplyFriendList"
	Friend_ApplyPass_FullMethodName       = "/service.Friend/ApplyPass"
	Friend_ApplyReject_FullMethodName     = "/service.Friend/ApplyReject"
	Friend_FriendList_FullMethodName      = "/service.Friend/FriendList"
	Friend_RemoveFriend_FullMethodName    = "/service.Friend/RemoveFriend"
)

// FriendClient is the client API for Friend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendClient interface {
	ApplyFriend(ctx context.Context, in *ApplyFriendRequest, opts ...grpc.CallOption) (*ApplyFriendResponse, error)
	ApplyFriendList(ctx context.Context, in *ApplyFriendListRequest, opts ...grpc.CallOption) (*ApplyFriendListResponse, error)
	ApplyPass(ctx context.Context, in *ApplyHandlerRequest, opts ...grpc.CallOption) (*ApplyHandlerResponse, error)
	ApplyReject(ctx context.Context, in *ApplyHandlerRequest, opts ...grpc.CallOption) (*ApplyHandlerResponse, error)
	FriendList(ctx context.Context, in *FriendListRequest, opts ...grpc.CallOption) (*FriendListResponse, error)
	RemoveFriend(ctx context.Context, in *RemoveFriendRequest, opts ...grpc.CallOption) (*RemoveFriendResponse, error)
}

type friendClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendClient(cc grpc.ClientConnInterface) FriendClient {
	return &friendClient{cc}
}

func (c *friendClient) ApplyFriend(ctx context.Context, in *ApplyFriendRequest, opts ...grpc.CallOption) (*ApplyFriendResponse, error) {
	out := new(ApplyFriendResponse)
	err := c.cc.Invoke(ctx, Friend_ApplyFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) ApplyFriendList(ctx context.Context, in *ApplyFriendListRequest, opts ...grpc.CallOption) (*ApplyFriendListResponse, error) {
	out := new(ApplyFriendListResponse)
	err := c.cc.Invoke(ctx, Friend_ApplyFriendList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) ApplyPass(ctx context.Context, in *ApplyHandlerRequest, opts ...grpc.CallOption) (*ApplyHandlerResponse, error) {
	out := new(ApplyHandlerResponse)
	err := c.cc.Invoke(ctx, Friend_ApplyPass_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) ApplyReject(ctx context.Context, in *ApplyHandlerRequest, opts ...grpc.CallOption) (*ApplyHandlerResponse, error) {
	out := new(ApplyHandlerResponse)
	err := c.cc.Invoke(ctx, Friend_ApplyReject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) FriendList(ctx context.Context, in *FriendListRequest, opts ...grpc.CallOption) (*FriendListResponse, error) {
	out := new(FriendListResponse)
	err := c.cc.Invoke(ctx, Friend_FriendList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendClient) RemoveFriend(ctx context.Context, in *RemoveFriendRequest, opts ...grpc.CallOption) (*RemoveFriendResponse, error) {
	out := new(RemoveFriendResponse)
	err := c.cc.Invoke(ctx, Friend_RemoveFriend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendServer is the server API for Friend service.
// All implementations must embed UnimplementedFriendServer
// for forward compatibility
type FriendServer interface {
	ApplyFriend(context.Context, *ApplyFriendRequest) (*ApplyFriendResponse, error)
	ApplyFriendList(context.Context, *ApplyFriendListRequest) (*ApplyFriendListResponse, error)
	ApplyPass(context.Context, *ApplyHandlerRequest) (*ApplyHandlerResponse, error)
	ApplyReject(context.Context, *ApplyHandlerRequest) (*ApplyHandlerResponse, error)
	FriendList(context.Context, *FriendListRequest) (*FriendListResponse, error)
	RemoveFriend(context.Context, *RemoveFriendRequest) (*RemoveFriendResponse, error)
	mustEmbedUnimplementedFriendServer()
}

// UnimplementedFriendServer must be embedded to have forward compatible implementations.
type UnimplementedFriendServer struct {
}

func (UnimplementedFriendServer) ApplyFriend(context.Context, *ApplyFriendRequest) (*ApplyFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyFriend not implemented")
}
func (UnimplementedFriendServer) ApplyFriendList(context.Context, *ApplyFriendListRequest) (*ApplyFriendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyFriendList not implemented")
}
func (UnimplementedFriendServer) ApplyPass(context.Context, *ApplyHandlerRequest) (*ApplyHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyPass not implemented")
}
func (UnimplementedFriendServer) ApplyReject(context.Context, *ApplyHandlerRequest) (*ApplyHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyReject not implemented")
}
func (UnimplementedFriendServer) FriendList(context.Context, *FriendListRequest) (*FriendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendList not implemented")
}
func (UnimplementedFriendServer) RemoveFriend(context.Context, *RemoveFriendRequest) (*RemoveFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFriend not implemented")
}
func (UnimplementedFriendServer) mustEmbedUnimplementedFriendServer() {}

// UnsafeFriendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendServer will
// result in compilation errors.
type UnsafeFriendServer interface {
	mustEmbedUnimplementedFriendServer()
}

func RegisterFriendServer(s grpc.ServiceRegistrar, srv FriendServer) {
	s.RegisterService(&Friend_ServiceDesc, srv)
}

func _Friend_ApplyFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).ApplyFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_ApplyFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).ApplyFriend(ctx, req.(*ApplyFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_ApplyFriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyFriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).ApplyFriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_ApplyFriendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).ApplyFriendList(ctx, req.(*ApplyFriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_ApplyPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).ApplyPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_ApplyPass_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).ApplyPass(ctx, req.(*ApplyHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_ApplyReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).ApplyReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_ApplyReject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).ApplyReject(ctx, req.(*ApplyHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_FriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).FriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_FriendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).FriendList(ctx, req.(*FriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Friend_RemoveFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendServer).RemoveFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Friend_RemoveFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendServer).RemoveFriend(ctx, req.(*RemoveFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Friend_ServiceDesc is the grpc.ServiceDesc for Friend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Friend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Friend",
	HandlerType: (*FriendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyFriend",
			Handler:    _Friend_ApplyFriend_Handler,
		},
		{
			MethodName: "ApplyFriendList",
			Handler:    _Friend_ApplyFriendList_Handler,
		},
		{
			MethodName: "ApplyPass",
			Handler:    _Friend_ApplyPass_Handler,
		},
		{
			MethodName: "ApplyReject",
			Handler:    _Friend_ApplyReject_Handler,
		},
		{
			MethodName: "FriendList",
			Handler:    _Friend_FriendList_Handler,
		},
		{
			MethodName: "RemoveFriend",
			Handler:    _Friend_RemoveFriend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "friend.proto",
}
